import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["children", "condition", "as"];
import { jsx as _jsx } from "react/jsx-runtime";
export var Switch = _ref => {
  var _ref2, _matchChild;
  var {
    children
  } = _ref;
  var matchChild = null;
  var defaultCase = null;
  var childs = Array.isArray(children) ? children : [children];
  childs.some(child => {
    if (!defaultCase && child && child.type === Default) {
      defaultCase = child;
    }
    if (child && child.type === Case) {
      var {
        condition
      } = child.props;
      var conditionIsTrue = Boolean(condition);
      if (conditionIsTrue) {
        matchChild = child;
        return true;
      }
    }
    return false;
  });
  return (_ref2 = (_matchChild = matchChild) != null ? _matchChild : defaultCase) != null ? _ref2 : null;
};
export var Case = props => {
  var {
      children,
      as: Comp
    } = props,
    reset = _objectWithoutPropertiesLoose(props, _excluded);
  var Elm = Comp;
  return Elm ? /*#__PURE__*/_jsx(Elm, _extends({}, reset, {
    children: children
  })) : children;
};
export var Default = props => /*#__PURE__*/_jsx(Case, _extends({}, _extends({}, props)));